-- MySQL Script generated by MySQL Workbench
-- Fri Jan 11 17:34:47 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema SolutionMaps
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SolutionMaps` ;

-- -----------------------------------------------------
-- Schema SolutionMaps
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SolutionMaps` DEFAULT CHARACTER SET utf8 ;
USE `SolutionMaps` ;

-- -----------------------------------------------------
-- Table `SolutionMaps`.`suites`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`suites` (
  `suiteid` INT NOT NULL AUTO_INCREMENT,
  `suite_name` VARCHAR(50) NOT NULL COMMENT 'repr*',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  PRIMARY KEY (`suiteid`, `update_date`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`category_names`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`category_names` (
  `category_nameid` INT NOT NULL AUTO_INCREMENT,
  `category_name` VARCHAR(45) NOT NULL COMMENT 'repr*',
  UNIQUE INDEX `SubcategoryID_UNIQUE` (`category_nameid` ASC),
  UNIQUE INDEX `SubcategoryName_UNIQUE` (`category_name` ASC),
  PRIMARY KEY (`category_nameid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`element_names`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`element_names` (
  `element_nameid` INT NOT NULL AUTO_INCREMENT,
  `elementname` VARCHAR(100) NOT NULL COMMENT 'repr*',
  UNIQUE INDEX `ElementID_UNIQUE` (`element_nameid` ASC),
  UNIQUE INDEX `ElementName_UNIQUE` (`elementname` ASC),
  PRIMARY KEY (`element_nameid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`personas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`personas` (
  `personaid` INT NOT NULL,
  `personaname` VARCHAR(45) NOT NULL,
  `persona_description` VARCHAR(1000) NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`personaid`, `update_date`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`parentvendors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`parentvendors` (
  `parent_vendorid` INT NOT NULL AUTO_INCREMENT,
  `parent_name` VARCHAR(45) NOT NULL,
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  PRIMARY KEY (`parent_vendorid`, `update_date`),
  UNIQUE INDEX `ParentVendorID_UNIQUE` (`parent_vendorid` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`vendors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`vendors` (
  `vendorid` INT NOT NULL AUTO_INCREMENT,
  `vendor_name` VARCHAR(45) NOT NULL COMMENT 'repr*',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  `active` INT(1) NOT NULL,
  `parent_vendorid` INT NULL COMMENT 'fk*parentvendors.parent_vendorid',
  `vendor_weight` DECIMAL(3,2) NULL,
  PRIMARY KEY (`vendorid`, `update_date`),
  INDEX `FK_parentven_idx` (`parent_vendorid` ASC),
  CONSTRAINT `FK_parentven`
    FOREIGN KEY (`parent_vendorid`)
    REFERENCES `SolutionMaps`.`parentvendors` (`parent_vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`suitemodules`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`suitemodules` (
  `suite_id` INT NOT NULL COMMENT 'fk*suites.suiteid',
  `suitemodid` INT NOT NULL AUTO_INCREMENT,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  `suitemod_name` VARCHAR(45) NOT NULL COMMENT 'repr*',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  PRIMARY KEY (`suitemodid`, `update_date`),
  CONSTRAINT `FKsuitcat`
    FOREIGN KEY (`suite_id`)
    REFERENCES `SolutionMaps`.`suites` (`suiteid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`suitemodcat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`suitemodcat` (
  `suitemod_id` INT NOT NULL COMMENT 'fk*suitemodules.suitemodid',
  `suitemodcatid` INT NOT NULL AUTO_INCREMENT,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  `category_name_id` INT NOT NULL COMMENT 'fk*category_names.category_nameid',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  INDEX `FK_catsubsub_idx` (`category_name_id` ASC),
  PRIMARY KEY (`suitemodcatid`, `update_date`),
  INDEX `FK_catsubcat_idx` (`suitemod_id` ASC),
  CONSTRAINT `FK_catsubcat`
    FOREIGN KEY (`suitemod_id`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_catsubsub`
    FOREIGN KEY (`category_name_id`)
    REFERENCES `SolutionMaps`.`category_names` (`category_nameid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`elementvariants`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`elementvariants` (
  `variantid` INT NOT NULL AUTO_INCREMENT,
  `specification` VARCHAR(5000) NULL COMMENT 'Largest one in the old system, in S2P (not including CWS yet) is 2294 characters.',
  `example_scoring` VARCHAR(2000) NULL COMMENT 'Largest one in the old system, in S2P (not including CWS yet) is 804 characters.',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  PRIMARY KEY (`variantid`, `update_date`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`suitemodcatelem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`suitemodcatelem` (
  `suitemodcat_id` INT NOT NULL COMMENT 'fk*suitemodcat.suitemodcatid',
  `smceid` INT NOT NULL AUTO_INCREMENT,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  `element_name_id` INT NOT NULL COMMENT 'fk*element_names.element_nameid',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `variant_id` INT NOT NULL COMMENT 'fk*elementvariants.variantid',
  `classid` INT NULL COMMENT 'Classes must be rethought',
  PRIMARY KEY (`smceid`, `update_date`),
  INDEX `FK_scse_VariantID_idx` (`variant_id` ASC),
  INDEX `FK_scse_elementID_idx` (`element_name_id` ASC),
  INDEX `FK_catsubelsub_idx` (`suitemodcat_id` ASC),
  CONSTRAINT `FK_catsubelsub`
    FOREIGN KEY (`suitemodcat_id`)
    REFERENCES `SolutionMaps`.`suitemodcat` (`suitemodcatid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_scse_VariantID`
    FOREIGN KEY (`variant_id`)
    REFERENCES `SolutionMaps`.`elementvariants` (`variantid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_scse_elementID`
    FOREIGN KEY (`element_name_id`)
    REFERENCES `SolutionMaps`.`element_names` (`element_nameid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`Weights_smce`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`Weights_smce` (
  `Persona` INT NOT NULL,
  `smce_ID` INT NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  `Weight` DECIMAL(3,2) NOT NULL,
  `User_ID` INT NOT NULL,
  `ReasonForChange` VARCHAR(1000) NULL,
  `LastVersion` INT(1) NOT NULL,
  `Quarter` INT(1) NOT NULL,
  `Year` INT(4) NOT NULL,
  PRIMARY KEY (`Persona`, `smce_ID`, `UpdateDate`),
  INDEX `FkPersWeight_idx` (`Persona` ASC),
  INDEX `fk_weightselem_idx` (`smce_ID` ASC),
  CONSTRAINT `FkPersWeight`
    FOREIGN KEY (`Persona`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Wscse_scse`
    FOREIGN KEY (`smce_ID`)
    REFERENCES `SolutionMaps`.`suitemodcatelem` (`smceid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`users` (
  `userid` INT NOT NULL,
  `email` VARCHAR(80) NOT NULL COMMENT 'repr*',
  `user_type` VARCHAR(7) NOT NULL COMMENT 'Possible options:\n‘DBA’\n‘Analyst’\n‘Staff’\n‘Regular’',
  `assigned_vendor_id` INT NULL COMMENT 'fk*vendors.vendorid',
  `password` VARCHAR(45) NOT NULL,
  `update_date` DATETIME NOT NULL COMMENT 'onupdate*',
  `active` INT(1) NOT NULL,
  `registration_date` DATETIME NOT NULL,
  `anonymized` INT(1) NOT NULL,
  `private` INT(1) NOT NULL,
  UNIQUE INDEX `UserID_UNIQUE` (`userid` ASC),
  UNIQUE INDEX `EMail_UNIQUE` (`email` ASC),
  PRIMARY KEY (`userid`, `update_date`),
  INDEX `fk_users_vendors_idx` (`assigned_vendor_id` ASC),
  CONSTRAINT `fk_users_vendors`
    FOREIGN KEY (`assigned_vendor_id`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`Attachments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`Attachments` (
  `Attachment_ID` INT NOT NULL,
  `Notes` VARCHAR(300) NULL COMMENT 'This is the RFI cell text, wether it contains a URL itself or not',
  `UploadDate` DATETIME NULL,
  `OriginalFileName` VARCHAR(200) NULL,
  `Path` VARCHAR(500) NULL,
  `Extension` VARCHAR(10) NULL,
  `FileName` VARCHAR(200) NULL,
  `URL` VARCHAR(300) NULL,
  `Process` VARCHAR(15) NULL,
  PRIMARY KEY (`Attachment_ID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`rfielements_providers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`rfielements_providers` (
  `vendor_id` INT NOT NULL COMMENT 'fk*vendors.vendorid',
  `smce_id` INT NOT NULL COMMENT 'fk*suitemodcatelem.smceid',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `round` INT(1) NOT NULL COMMENT 'Round must be 1 (initial RFI scoring) or 2 (facts check)',
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Do we want on update = datetime.datetime.now here? That would only work for editing responses through the admin panel. Do we want to update that date even if it’s done through the admin panel?',
  `self_score` INT(1) NULL COMMENT '0 -5 scale',
  `self_description` VARCHAR(5000) NULL COMMENT 'Round 1 = Self-Description\nRound 2 = Reasoning\nLENGHT PENDING, CHECK LARGEST SELF-DESCRIPTIONS UNTIL THE NOW. 5000 characters by now, is it too much?',
  `attachment_id` INT NULL COMMENT 'PENDING FK',
  `user_id` INT NOT NULL COMMENT 'fk*users.userid',
  PRIMARY KEY (`vendor_id`, `smce_id`, `round`, `update_date`, `year`, `quarter`),
  INDEX `FKstagana2_idx` (`user_id` ASC),
  INDEX `FKrfiscorestaging_idx` (`smce_id` ASC),
  INDEX `FKrfelementvendor_idx` (`vendor_id` ASC),
  INDEX `FK_RFIelements_AttID_idx` (`attachment_id` ASC),
  CONSTRAINT `FKstagana2`
    FOREIGN KEY (`user_id`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FKrfiscorestaging`
    FOREIGN KEY (`smce_id`)
    REFERENCES `SolutionMaps`.`suitemodcatelem` (`smceid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FKrfelementvendor`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_RFIelements_AttID`
    FOREIGN KEY (`attachment_id`)
    REFERENCES `SolutionMaps`.`Attachments` (`Attachment_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`survey_questions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`survey_questions` (
  `questionid` INT NOT NULL,
  `statement` VARCHAR(500) NOT NULL COMMENT 'repr*',
  PRIMARY KEY (`questionid`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorAreas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorAreas` (
  `VendorAreaName` VARCHAR(45) NOT NULL,
  `VendorAreaID` INT NOT NULL AUTO_INCREMENT,
  `Active` INT(1) NOT NULL,
  PRIMARY KEY (`VendorAreaID`),
  UNIQUE INDEX `VendorCategoryName_UNIQUE` (`VendorAreaName` ASC),
  UNIQUE INDEX `VendorCategoryID_UNIQUE` (`VendorAreaID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorFields`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorFields` (
  `FieldID` INT NOT NULL AUTO_INCREMENT,
  `Field` VARCHAR(200) NOT NULL,
  `AreaID` INT NOT NULL,
  `Active` INT(1) NOT NULL,
  `OneSheet` INT(1) NULL,
  PRIMARY KEY (`AreaID`, `Field`),
  UNIQUE INDEX `QuestionID_UNIQUE` (`FieldID` ASC),
  CONSTRAINT `FK_vendorareafield`
    FOREIGN KEY (`AreaID`)
    REFERENCES `SolutionMaps`.`VendorAreas` (`VendorAreaID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorsInformation`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorsInformation` (
  `VendorID` INT NOT NULL,
  `FieldID` INT NOT NULL,
  `Info` VARCHAR(1000) NULL,
  `LastVersion` INT(1) NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  PRIMARY KEY (`VendorID`, `FieldID`, `UpdateDate`),
  UNIQUE INDEX `FieldID_UNIQUE` (`FieldID` ASC),
  CONSTRAINT `FKVendor`
    FOREIGN KEY (`VendorID`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_vendorinfofield`
    FOREIGN KEY (`FieldID`)
    REFERENCES `SolutionMaps`.`VendorFields` (`FieldID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserPersonas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserPersonas` (
  `UserID` INT NOT NULL,
  `UserPersonaName` VARCHAR(45) NOT NULL,
  `UserPersonaID` INT NOT NULL AUTO_INCREMENT,
  `Description` VARCHAR(500) NULL,
  `BasePersonaID` INT NULL,
  PRIMARY KEY (`UserID`, `UserPersonaName`),
  UNIQUE INDEX `UserPersonaID_UNIQUE` (`UserPersonaID` ASC),
  CONSTRAINT `FK_upu`
    FOREIGN KEY (`UserID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_basepersona`
    FOREIGN KEY (`UserPersonaID`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserWeights`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserWeights` (
  `UserPersonaID` INT NOT NULL,
  `smce_ID` INT NOT NULL,
  `Weight` DECIMAL(2,1) NULL,
  PRIMARY KEY (`UserPersonaID`, `smce_ID`),
  INDEX `fk_elementuserweight_idx` (`smce_ID` ASC),
  CONSTRAINT `FK_upidweight`
    FOREIGN KEY (`UserPersonaID`)
    REFERENCES `SolutionMaps`.`UserPersonas` (`UserPersonaID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_elementuserweight`
    FOREIGN KEY (`smce_ID`)
    REFERENCES `SolutionMaps`.`suitemodcatelem` (`smceid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserScores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserScores` (
  `UserID` INT NOT NULL,
  `smce_ID` INT NOT NULL,
  `VendorID` INT NOT NULL,
  `Score` DECIMAL(2,1) NULL,
  PRIMARY KEY (`UserID`, `smce_ID`, `VendorID`),
  INDEX `FK_vendorUScores_idx` (`VendorID` ASC),
  INDEX `FK_scseuserscore_idx` (`smce_ID` ASC),
  CONSTRAINT `FK_UserScores`
    FOREIGN KEY (`UserID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_vendorUScores`
    FOREIGN KEY (`VendorID`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_scseuserscore`
    FOREIGN KEY (`smce_ID`)
    REFERENCES `SolutionMaps`.`suitemodcatelem` (`smceid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`PriceScores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`PriceScores` (
  `SuiteMod_ID` INT NOT NULL,
  `VendorID` INT NOT NULL,
  `PersonaID` INT NOT NULL,
  `PriceScore` DECIMAL(2,1) NOT NULL COMMENT 'Scale: 0 - 5',
  `PriceScoreID` INT NOT NULL AUTO_INCREMENT,
  `UpdateDate` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Quarter` INT(1) NOT NULL,
  `Year` INT(4) NOT NULL,
  PRIMARY KEY (`SuiteMod_ID`, `VendorID`, `PersonaID`, `UpdateDate`),
  INDEX `FK_psvendor_idx` (`VendorID` ASC),
  INDEX `FK_pspersona_idx` (`PersonaID` ASC),
  UNIQUE INDEX `PriceScoreID_UNIQUE` (`PriceScoreID` ASC),
  CONSTRAINT `FK_pscat`
    FOREIGN KEY (`SuiteMod_ID`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_psvendor`
    FOREIGN KEY (`VendorID`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_pspersona`
    FOREIGN KEY (`PersonaID`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`survey_references`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`survey_references` (
  `referenceid` INT NOT NULL AUTO_INCREMENT,
  `datetime` DATETIME NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `company` VARCHAR(45) NULL,
  `hq_country` VARCHAR(45) NULL,
  `office_country` VARCHAR(45) NULL,
  `vendor_id` INT NOT NULL COMMENT 'fk*vendors.vendorid',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `status` INT(1) NOT NULL COMMENT '1=Active\n2=Expired\n3=Duplicate\n4=Other Pulled Out\n5=Returning Reference, i.e. this will become active again once the other provider solicited ref, under the same email is expired. In comment for 5 type quarter when the other reference was received)',
  `type` INT(1) NOT NULL COMMENT '1: Provider Solicited\n2: Public',
  `internal_comments` VARCHAR(100) NULL,
  `original_vendor_id` INT NULL COMMENT 'It should be ‘fk*vendors.vendorid’ but it throws an error because of SQLAlchemy (two equal foreign keys in one same table)',
  PRIMARY KEY (`referenceid`),
  UNIQUE INDEX `ReferenceID_UNIQUE` (`referenceid` ASC),
  INDEX `FK_VendorSurvey_idx` (`vendor_id` ASC),
  INDEX `FK_SurveyRef_OriginalVendorID_idx` (`original_vendor_id` ASC),
  CONSTRAINT `FK_VendorSurvey`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SurveyRef_OriginalVendorID`
    FOREIGN KEY (`original_vendor_id`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`MultipliersClass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`MultipliersClass` (
  `ClassID` INT NOT NULL,
  `PersonaID` INT NOT NULL,
  `Multiplier` DECIMAL(3,2) NULL,
  PRIMARY KEY (`ClassID`, `PersonaID`),
  INDEX `fk_classmultipers_idx` (`PersonaID` ASC),
  CONSTRAINT `FK_classmulti`
    FOREIGN KEY (`ClassID`)
    REFERENCES `SolutionMaps`.`ElementClass` (`ClassID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_classmultipers`
    FOREIGN KEY (`PersonaID`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`ElementClass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`ElementClass` (
  `ClassName` VARCHAR(45) NOT NULL,
  `ClassID` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`ClassID`),
  UNIQUE INDEX `ClassID_UNIQUE` (`ClassID` ASC),
  UNIQUE INDEX `ClassName_UNIQUE` (`ClassName` ASC),
  CONSTRAINT `fk_scseclass`
    FOREIGN KEY (`ClassID`)
    REFERENCES `SolutionMaps`.`MultipliersClass` (`ClassID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`RegionHandicaps`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`RegionHandicaps` (
  `RegionID` INT NOT NULL AUTO_INCREMENT,
  `RegionHandicap` DECIMAL(3,2) NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  `LastVersion` INT(1) NOT NULL,
  `AnalystID` INT NOT NULL,
  PRIMARY KEY (`RegionID`, `UpdateDate`),
  INDEX `fk_regionhandanalyst_idx` (`AnalystID` ASC),
  CONSTRAINT `fk_regionhandanalyst`
    FOREIGN KEY (`AnalystID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`RegionCountries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`RegionCountries` (
  `RegionID` INT NOT NULL,
  `CountryName` VARCHAR(45) NOT NULL,
  `CountryID` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`RegionID`, `CountryName`),
  UNIQUE INDEX `CountryName_UNIQUE` (`CountryName` ASC),
  UNIQUE INDEX `CountryID_UNIQUE` (`CountryID` ASC),
  CONSTRAINT `fk_regcoun`
    FOREIGN KEY (`RegionID`)
    REFERENCES `SolutionMaps`.`RegionHandicaps` (`RegionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`SurveyReferencesPenalization`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`SurveyReferencesPenalization` (
  `NumberOfRefs` INT(3) NOT NULL,
  `Penalization` DECIMAL(3,2) NULL,
  `LastVersion` INT(1) NULL,
  `UpdateDate` DATETIME NOT NULL,
  `AnalystID` INT NULL,
  PRIMARY KEY (`NumberOfRefs`, `UpdateDate`),
  INDEX `fk_srpanalyst_idx` (`AnalystID` ASC),
  CONSTRAINT `fk_srpanalyst`
    FOREIGN KEY (`AnalystID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`MultipliersElement`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`MultipliersElement` (
  `SuiteModCat_ID` INT NOT NULL,
  `PersonaID` INT NOT NULL,
  `Multiplier` DECIMAL(3,2) NULL,
  PRIMARY KEY (`SuiteModCat_ID`, `PersonaID`),
  INDEX `FK_multisubcatperson_idx` (`PersonaID` ASC),
  CONSTRAINT `FK_subcatmulti`
    FOREIGN KEY (`SuiteModCat_ID`)
    REFERENCES `SolutionMaps`.`suitemodcat` (`suitemodcatid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_multisubcatperson`
    FOREIGN KEY (`PersonaID`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserMultiplierClass`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserMultiplierClass` (
  `ClassID` INT NOT NULL,
  `UserPersonaID` INT NOT NULL,
  `Multiplier` DECIMAL(3,2) NULL,
  PRIMARY KEY (`ClassID`, `UserPersonaID`),
  INDEX `fk_usermultiper_idx` (`UserPersonaID` ASC),
  CONSTRAINT `fk_usermulticlass`
    FOREIGN KEY (`ClassID`)
    REFERENCES `SolutionMaps`.`ElementClass` (`ClassID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usermultiper`
    FOREIGN KEY (`UserPersonaID`)
    REFERENCES `SolutionMaps`.`UserPersonas` (`UserPersonaID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserMultiplierSubcat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserMultiplierSubcat` (
  `SuiteCatSubID` INT NOT NULL,
  `UserPersonaID` INT NOT NULL,
  `Multiplier` DECIMAL(3,2) NULL,
  PRIMARY KEY (`SuiteCatSubID`, `UserPersonaID`),
  INDEX `fk_usermultiper_idx` (`UserPersonaID` ASC),
  CONSTRAINT `fk_usermultisubcat`
    FOREIGN KEY (`SuiteCatSubID`)
    REFERENCES `SolutionMaps`.`suitemodcat` (`suitemodcatid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_usermultipersona`
    FOREIGN KEY (`UserPersonaID`)
    REFERENCES `SolutionMaps`.`UserPersonas` (`UserPersonaID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`rfi`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`rfi` (
  `rfi_id` INT NOT NULL AUTO_INCREMENT,
  `suitemod_id` INT NOT NULL COMMENT 'fk*suitemodules.suitemodid',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `invite_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`suitemod_id`, `quarter`, `year`),
  UNIQUE INDEX `RFI_ID_UNIQUE` (`rfi_id` ASC),
  CONSTRAINT `FK_rfisuitecat`
    FOREIGN KEY (`suitemod_id`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`RFIvendors`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`RFIvendors` (
  `RFI_ID` INT NOT NULL,
  `VendorID` INT NOT NULL,
  `AcceptanceDate` DATETIME NULL,
  `ConsentFormDate` DATETIME NULL,
  `ABIsubmissionDate` DATETIME NULL,
  `CompletionDate` DATETIME NULL,
  `Responder` VARCHAR(100) NULL,
  `ResponderUserID` INT NULL,
  `Status` VARCHAR(45) NOT NULL,
  `Private` INT(1) NOT NULL,
  `Type` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`RFI_ID`, `VendorID`),
  INDEX `FK_RFIVENDOR_idx` (`VendorID` ASC),
  INDEX `fk_rfiuser_idx` (`ResponderUserID` ASC),
  CONSTRAINT `FK_RFIVENDOR`
    FOREIGN KEY (`VendorID`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_rfiuser`
    FOREIGN KEY (`ResponderUserID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_RFIID`
    FOREIGN KEY (`RFI_ID`)
    REFERENCES `SolutionMaps`.`rfi` (`rfi_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorModules`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorModules` (
  `VendorID` INT NOT NULL,
  `SuiteMod_ID` INT NOT NULL,
  `Private` INT(1) NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  `LastVersion` INT(1) NOT NULL,
  PRIMARY KEY (`VendorID`, `SuiteMod_ID`, `UpdateDate`),
  INDEX `fk_catvendorcat_idx` (`SuiteMod_ID` ASC),
  CONSTRAINT `FK_VENDORCAT`
    FOREIGN KEY (`VendorID`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_catvendorcat`
    FOREIGN KEY (`SuiteMod_ID`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`Surveys`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`Surveys` (
  `SurveyID` INT NOT NULL AUTO_INCREMENT,
  `SurveyName` VARCHAR(45) NOT NULL,
  `RespondentType` VARCHAR(45) NULL,
  `Description` VARCHAR(1000) NULL,
  `CreationDate` DATETIME NULL,
  UNIQUE INDEX `SurveyName_UNIQUE` (`SurveyName` ASC),
  UNIQUE INDEX `SurveyID_UNIQUE` (`SurveyID` ASC),
  PRIMARY KEY (`SurveyID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserFields`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserFields` (
  `FieldID` INT NOT NULL,
  `FieldName` VARCHAR(100) NULL,
  `Active` INT(1) NULL,
  PRIMARY KEY (`FieldID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserInfo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserInfo` (
  `UserVersionID` INT NOT NULL,
  `UserFieldID` INT NOT NULL,
  `UserInfo` VARCHAR(200) NULL,
  `LastVersion` INT(1) NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  PRIMARY KEY (`UserVersionID`, `UserFieldID`, `UpdateDate`),
  INDEX `fk_userinfofield_idx` (`UserFieldID` ASC),
  CONSTRAINT `fk_userinfofield`
    FOREIGN KEY (`UserFieldID`)
    REFERENCES `SolutionMaps`.`UserFields` (`FieldID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_userinfouser`
    FOREIGN KEY (`UserVersionID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserFavPersonas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserFavPersonas` (
  `UserID` INT NOT NULL,
  `PersonaID` INT NOT NULL,
  PRIMARY KEY (`UserID`, `PersonaID`),
  INDEX `fk_favperper_idx` (`PersonaID` ASC),
  CONSTRAINT `fk_favperuser`
    FOREIGN KEY (`UserID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_favperper`
    FOREIGN KEY (`PersonaID`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`AnalystScoreChanges`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`AnalystScoreChanges` (
  `AnalystChangeID` INT NOT NULL AUTO_INCREMENT,
  `RFIelementID` INT NOT NULL,
  `AnalystID` INT NOT NULL,
  `Explanation` VARCHAR(1000) NOT NULL,
  `ChangeDate` DATETIME NOT NULL,
  `PreviousScore` DECIMAL(3,2) NULL,
  `NewScore` DECIMAL(3,2) NULL,
  PRIMARY KEY (`AnalystChangeID`),
  UNIQUE INDEX `AnalystChangeID_UNIQUE` (`AnalystChangeID` ASC),
  INDEX `FK_ANALYSTSCOREANALYST_idx` (`AnalystID` ASC),
  CONSTRAINT `FK_ANALYSTSCOREANALYST`
    FOREIGN KEY (`AnalystID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`ModuleWeights`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`ModuleWeights` (
  `Persona` INT NOT NULL,
  `SuiteMod_ID` INT NOT NULL,
  `UpdateDate` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `Weight` DECIMAL(3,2) NOT NULL,
  `AnalystID` INT NOT NULL,
  `ReasonForChange` VARCHAR(1000) NULL,
  `LastVersion` INT(1) NOT NULL,
  `RFI_ID` INT NOT NULL,
  PRIMARY KEY (`Persona`, `SuiteMod_ID`, `UpdateDate`),
  INDEX `FkPersWeight_idx` (`Persona` ASC),
  INDEX `fk_weightrfid_idx` (`RFI_ID` ASC),
  INDEX `fk_weightselem0_idx` (`SuiteMod_ID` ASC),
  CONSTRAINT `FkPersWeight0`
    FOREIGN KEY (`Persona`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weightselem0`
    FOREIGN KEY (`SuiteMod_ID`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_weightrfid0`
    FOREIGN KEY (`RFI_ID`)
    REFERENCES `SolutionMaps`.`rfi` (`rfi_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserModuleWeights`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserModuleWeights` (
  `UserPersonaID` INT NOT NULL,
  `SuiteMod_ID` INT NOT NULL,
  `Weight` DECIMAL(3,2) NOT NULL,
  PRIMARY KEY (`UserPersonaID`, `SuiteMod_ID`),
  INDEX `fk_elementuserweight_idx` (`SuiteMod_ID` ASC),
  CONSTRAINT `FK_UserCategoryWeightsuserpersonas`
    FOREIGN KEY (`UserPersonaID`)
    REFERENCES `SolutionMaps`.`UserPersonas` (`UserPersonaID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_UserCategoryWeightssuitecat`
    FOREIGN KEY (`SuiteMod_ID`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`BaseCalendars`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`BaseCalendars` (
  `BaseCalendarID` INT NOT NULL AUTO_INCREMENT,
  `BaseCalendarProcess` VARCHAR(100) NOT NULL,
  `Description` VARCHAR(500) NULL,
  `Ongoing` INT(1) NOT NULL,
  PRIMARY KEY (`BaseCalendarID`),
  UNIQUE INDEX `DeadlineProcess_UNIQUE` (`BaseCalendarProcess` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`SurveyCountriesHandicap`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`SurveyCountriesHandicap` (
  `CountryID` INT NOT NULL,
  `CountryHandicap` DECIMAL(3,2) NULL,
  `LastVersion` INT(1) NULL,
  `UpdateDate` DATETIME NOT NULL,
  `AnalystID` INT NULL,
  PRIMARY KEY (`CountryID`, `UpdateDate`),
  INDEX `fk_countrieshandicapanalyst_idx` (`AnalystID` ASC),
  CONSTRAINT `fk_countriesversion`
    FOREIGN KEY (`CountryID`)
    REFERENCES `SolutionMaps`.`RegionCountries` (`CountryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_countrieshandicapanalyst`
    FOREIGN KEY (`AnalystID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserSuites`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserSuites` (
  `UserID` INT NOT NULL,
  `UserSuiteName` VARCHAR(45) NOT NULL,
  `UserSuiteID` INT NOT NULL AUTO_INCREMENT,
  `Description` VARCHAR(500) NULL,
  PRIMARY KEY (`UserID`, `UserSuiteName`),
  UNIQUE INDEX `UserPersonaID_UNIQUE` (`UserSuiteID` ASC),
  CONSTRAINT `FK_usersuitesuserlogin`
    FOREIGN KEY (`UserID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserSuiteModules`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserSuiteModules` (
  `UserSuiteID` INT NOT NULL,
  `SuiteMod_ID` INT NOT NULL,
  `Weight` DECIMAL(3,2) NOT NULL,
  PRIMARY KEY (`UserSuiteID`, `SuiteMod_ID`),
  INDEX `FK_Uscid_idx` (`SuiteMod_ID` ASC),
  CONSTRAINT `FK_UserSuiteCategoriesUserLog`
    FOREIGN KEY (`UserSuiteID`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_USCSuiteCategory`
    FOREIGN KEY (`SuiteMod_ID`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`Activities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`Activities` (
  `ActivityID` INT NOT NULL AUTO_INCREMENT,
  `ActivityName` VARCHAR(100) NOT NULL,
  `Description` VARCHAR(500) NULL,
  PRIMARY KEY (`ActivityID`),
  UNIQUE INDEX `DeadlineProcess_UNIQUE` (`ActivityName` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`BaseCalendarActivities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`BaseCalendarActivities` (
  `BaseCalendarID` INT NOT NULL,
  `ActivityID` INT NOT NULL,
  PRIMARY KEY (`BaseCalendarID`, `ActivityID`),
  INDEX `fk_basecalendaractiacti_idx` (`ActivityID` ASC),
  CONSTRAINT `fk_basecalendaractivities`
    FOREIGN KEY (`BaseCalendarID`)
    REFERENCES `SolutionMaps`.`BaseCalendars` (`BaseCalendarID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_basecalendaractiacti`
    FOREIGN KEY (`ActivityID`)
    REFERENCES `SolutionMaps`.`Activities` (`ActivityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`ProjectCalendars`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`ProjectCalendars` (
  `BaseCalendarID` INT NOT NULL,
  `Quarter` INT(1) NOT NULL,
  `Year` INT(2) NOT NULL,
  `ProjectCalendarID` INT NOT NULL AUTO_INCREMENT,
  `ProjectAdminID` INT NOT NULL,
  PRIMARY KEY (`BaseCalendarID`, `Quarter`, `Year`),
  UNIQUE INDEX `CalendarID_UNIQUE` (`ProjectCalendarID` ASC),
  CONSTRAINT `fk_calendardeadlines`
    FOREIGN KEY (`BaseCalendarID`)
    REFERENCES `SolutionMaps`.`BaseCalendars` (`BaseCalendarID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`ProjectCalendarActivities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`ProjectCalendarActivities` (
  `ProjectCalendarID` INT NOT NULL,
  `ActivityID` INT NOT NULL,
  `Deadline` DATETIME NOT NULL,
  `AnalystID` INT NULL,
  `VendorID` INT NULL,
  `LastVersion` INT(1) NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  PRIMARY KEY (`ProjectCalendarID`, `ActivityID`, `UpdateDate`),
  INDEX `FK_CALENDARACTIVITY_idx` (`ActivityID` ASC),
  CONSTRAINT `FK_CALENDARCALENDAR`
    FOREIGN KEY (`ProjectCalendarID`)
    REFERENCES `SolutionMaps`.`ProjectCalendars` (`ProjectCalendarID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_CALENDARACTIVITY`
    FOREIGN KEY (`ActivityID`)
    REFERENCES `SolutionMaps`.`Activities` (`ActivityID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorSuites`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorSuites` (
  `VendorSuiteID` INT NOT NULL AUTO_INCREMENT,
  `VendorID` INT NOT NULL,
  `VendorSuite` VARCHAR(50) NOT NULL,
  PRIMARY KEY (`VendorID`, `VendorSuite`),
  UNIQUE INDEX `VendorSuiteID_UNIQUE` (`VendorSuiteID` ASC),
  CONSTRAINT `FK_VENDORSUITEVENDORID`
    FOREIGN KEY (`VendorID`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorSuiteHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorSuiteHistory` (
  `VendorSuiteID` INT NOT NULL,
  `Version` VARCHAR(20) NOT NULL,
  `ReleaseDate` DATETIME NOT NULL,
  `ReleaseNotes` VARCHAR(10000) NULL,
  `VendorSuiteHistoryID` INT NOT NULL AUTO_INCREMENT,
  `LastVersion` INT(1) NULL,
  PRIMARY KEY (`VendorSuiteID`, `Version`),
  UNIQUE INDEX `VendorSuiteHistoryID_UNIQUE` (`VendorSuiteHistoryID` ASC),
  CONSTRAINT `FK_VENDORSUITEHISTORY`
    FOREIGN KEY (`VendorSuiteID`)
    REFERENCES `SolutionMaps`.`VendorSuites` (`VendorSuiteID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorModules2`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorModules2` (
  `VendorSuiteID` INT NOT NULL,
  `VendorModule` VARCHAR(45) NOT NULL,
  `VendorModuleID` INT NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`VendorSuiteID`, `VendorModule`),
  UNIQUE INDEX `VendorModuleID_UNIQUE` (`VendorModuleID` ASC),
  INDEX `FK_vendormodulesvid_idx` (`VendorSuiteID` ASC),
  CONSTRAINT `FK_vendormodulesvid`
    FOREIGN KEY (`VendorSuiteID`)
    REFERENCES `SolutionMaps`.`VendorSuites` (`VendorSuiteID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`VendorModuleHistory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`VendorModuleHistory` (
  `ModuleVersion` VARCHAR(20) NOT NULL,
  `VendorModuleID` INT NOT NULL,
  `ReleaseDate` DATETIME NULL,
  `ReleaseNotes` VARCHAR(2000) NULL,
  `LastVersion` DATETIME NULL,
  PRIMARY KEY (`ModuleVersion`, `VendorModuleID`),
  INDEX `FK_VENDORMODULEHISTORY_idx` (`VendorModuleID` ASC),
  CONSTRAINT `FK_VENDORMODULEHISTORY`
    FOREIGN KEY (`VendorModuleID`)
    REFERENCES `SolutionMaps`.`VendorModules2` (`VendorModuleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`PermissionQuestions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`PermissionQuestions` (
  `PermissionQuestionID` INT NOT NULL,
  `PermissionQuestion` VARCHAR(500) NOT NULL,
  PRIMARY KEY (`PermissionQuestionID`),
  UNIQUE INDEX `PermissionQuestion_UNIQUE` (`PermissionQuestion` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`UserPermissions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`UserPermissions` (
  `UserID` INT NOT NULL,
  `PermissionQuestionID` INT NOT NULL,
  `Response` INT(1) NOT NULL,
  `Date` DATETIME NOT NULL,
  PRIMARY KEY (`UserID`, `PermissionQuestionID`),
  INDEX `FK_userpermquest_idx` (`PermissionQuestionID` ASC),
  CONSTRAINT `FK_userpermquest`
    FOREIGN KEY (`PermissionQuestionID`)
    REFERENCES `SolutionMaps`.`PermissionQuestions` (`PermissionQuestionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`refs_suitemods`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`refs_suitemods` (
  `reference_id` INT NOT NULL COMMENT 'fk*survey_references.referenceid',
  `suitemod_id` INT NOT NULL COMMENT 'fk*suitemodules.suitemodid',
  PRIMARY KEY (`reference_id`, `suitemod_id`),
  INDEX `FKKSurveyRefSuiteCat_SuiteCat_idx` (`suitemod_id` ASC),
  CONSTRAINT `FKSurveyRefSuiteCat_Ref`
    FOREIGN KEY (`reference_id`)
    REFERENCES `SolutionMaps`.`survey_references` (`referenceid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FKKSurveyRefSuiteCat_SuiteCat`
    FOREIGN KEY (`suitemod_id`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`survey_answers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`survey_answers` (
  `reference_id` INT NOT NULL COMMENT 'fk*survey_references.referenceid',
  `question_id` INT NOT NULL COMMENT 'fk*survey_questions.questionid',
  `Answer` VARCHAR(1000) NULL COMMENT 'Out of +700 references analyzed, only three answers of them slightly exceeded 1000 characters.',
  PRIMARY KEY (`reference_id`, `question_id`),
  INDEX `FK_SurveyScores_Question_idx` (`question_id` ASC),
  CONSTRAINT `FK_SurveyScoresRef`
    FOREIGN KEY (`reference_id`)
    REFERENCES `SolutionMaps`.`survey_references` (`referenceid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SurveyScoresQuestion`
    FOREIGN KEY (`question_id`)
    REFERENCES `SolutionMaps`.`survey_questions` (`questionid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`QuarterYear`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`QuarterYear` (
  `QuarterYearID` INT(2) NOT NULL AUTO_INCREMENT,
  `Quarter` INT(1) NOT NULL,
  `Year` INT(4) NOT NULL,
  UNIQUE INDEX `QuarterYearID_UNIQUE` (`QuarterYearID` ASC),
  PRIMARY KEY (`Quarter`, `Year`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`SurveyWeights`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`SurveyWeights` (
  `Survey_ID` INT NOT NULL,
  `QuestionID` INT NOT NULL,
  `SuiteMod_ID` INT NOT NULL,
  `PersonaID` INT NOT NULL,
  `QY_ID` INT NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  `Weight` DECIMAL(3,2) NOT NULL,
  `LastVersion` INT(1) NOT NULL,
  PRIMARY KEY (`Survey_ID`, `QuestionID`, `SuiteMod_ID`, `PersonaID`, `QY_ID`, `UpdateDate`),
  INDEX `FK_SW_QuestionID_idx` (`QuestionID` ASC),
  INDEX `FK_SW_SuiteCatID_idx` (`SuiteMod_ID` ASC),
  INDEX `FK_SW_PersonaID_idx` (`PersonaID` ASC),
  INDEX `FK_SW_QYID_idx` (`QY_ID` ASC),
  CONSTRAINT `FK_SW_SurveyID`
    FOREIGN KEY (`Survey_ID`)
    REFERENCES `SolutionMaps`.`Surveys` (`SurveyID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SW_QuestionID`
    FOREIGN KEY (`QuestionID`)
    REFERENCES `SolutionMaps`.`survey_questions` (`questionid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SW_SuiteCatID`
    FOREIGN KEY (`SuiteMod_ID`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SW_PersonaID`
    FOREIGN KEY (`PersonaID`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_SW_QYID`
    FOREIGN KEY (`QY_ID`)
    REFERENCES `SolutionMaps`.`QuarterYear` (`QuarterYearID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`Weights_SuiteModCat`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`Weights_SuiteModCat` (
  `Persona` INT NOT NULL,
  `SuiteModCat_ID` INT NOT NULL,
  `UpdateDate` DATETIME NOT NULL,
  `Weight` DECIMAL(4,3) NULL,
  `User_ID` INT NOT NULL,
  `ReasonForChange` VARCHAR(1000) NULL,
  `LastVersion` INT(1) NOT NULL,
  `QuarterYear_ID` INT(2) NOT NULL,
  PRIMARY KEY (`Persona`, `SuiteModCat_ID`, `UpdateDate`),
  INDEX `FkPersWeight_idx` (`Persona` ASC),
  INDEX `FK_QY_idx` (`QuarterYear_ID` ASC),
  INDEX `FK_WSuitCatSub_SuitCatsub_idx` (`SuiteModCat_ID` ASC),
  CONSTRAINT `FkPersWeight1`
    FOREIGN KEY (`Persona`)
    REFERENCES `SolutionMaps`.`personas` (`personaid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_WSuitCatSub_SuitCatsub`
    FOREIGN KEY (`SuiteModCat_ID`)
    REFERENCES `SolutionMaps`.`suitemodcat` (`suitemodcatid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_WSuitcatSub_QY`
    FOREIGN KEY (`QuarterYear_ID`)
    REFERENCES `SolutionMaps`.`QuarterYear` (`QuarterYearID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`userstest`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`userstest` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NULL,
  `email` VARCHAR(40) NULL,
  `password` VARCHAR(94) NULL,
  `created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`comments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`comments` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `user_id` INT NULL COMMENT 'fk*userstest.id',
  `text` VARCHAR(1000) NULL,
  `created_date` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  INDEX `FK_USERS_idx` (`user_id` ASC),
  CONSTRAINT `FK_USERS`
    FOREIGN KEY (`user_id`)
    REFERENCES `SolutionMaps`.`userstest` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`vendors_rfi`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`vendors_rfi` (
  `vendor_id` INT NOT NULL COMMENT 'fk*vendors.vendorid',
  `suitemod_id` INT NOT NULL COMMENT 'fk*suitemodules.suitemodid\nThis column is the one that makes each module appear in the vendor portal. If one vendor participates in P2P, then through code, any previous ePRO or I2P participations will be overridden, and only P2P will be shown. 	',
  `quarter` INT(1) NOT NULL COMMENT '\n',
  `year` INT(4) NOT NULL,
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'onupdate*',
  `status` VARCHAR(1) NOT NULL COMMENT 'Possible options: ’N’ - New / ‘R’ - Refreshing / ‘E’ - Existing /‘Z- If a vendor participated at some point in one module but then we want to deactivate it (not using their scores for benchmark averages), then there shouldn’t just be a row for that vendor/module/quarter/year, even if it existed at some point before. The vendor will still be able to see their history, but neither they or the analyst can submit any new ss//sd/att/sms/an for that quarter.',
  `current_round` INT(1) NOT NULL COMMENT 'current_round will either be NULL/1/2.\nIf participating_this_quarter = 0, then current_round = NULL\nIf participating_this_quarter = 1, current_round = 1 by default. Then, once the analyst has finished scoring them for the first time in the quarter, he/she will switch current_round = 2 for that vendor and module, so round 2 is open for both vendor and analyst.',
  PRIMARY KEY (`vendor_id`, `suitemod_id`, `quarter`, `year`),
  INDEX `vendors_rfi_suitemodule_idx` (`suitemod_id` ASC),
  CONSTRAINT `vendors_rfi_vendor`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `vendors_rfi_suitemodule`
    FOREIGN KEY (`suitemod_id`)
    REFERENCES `SolutionMaps`.`suitemodules` (`suitemodid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`current_quarteryear`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`current_quarteryear` (
  `id` INT(1) NOT NULL COMMENT 'This table can only contain one row, and it will decide which quarter/year is shown to receive rfi submissions.\nPremise: this applies to every vendor, there cannot be two vendors that are in different quarters.\n\nThe id column is totally unnecessary	from a database point of view, but the ORM used (SQLAlchemy), does not allow to have a table without PKs. Furthermore, Flask-admin library doesn’t allow to edit a PK, so this column must be created. It will be hidden in the admin panel.',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SolutionMaps`.`rfielements_analysts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `SolutionMaps`.`rfielements_analysts` (
  `vendor_id` INT NOT NULL COMMENT 'fk*vendors.vendorid',
  `smce_id` INT NOT NULL COMMENT 'fk*suitemodcatelem.smceid',
  `quarter` INT(1) NOT NULL,
  `year` INT(4) NOT NULL,
  `round` INT(1) NOT NULL COMMENT 'Round must be 1 (initial RFI scoring) or 2 (facts check)',
  `update_date` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Do we want on update = datetime.datetime.now here? That would only work for editing responses through the admin panel. Do we want to update that date even if it’s done through the admin panel?',
  `sm_score` DECIMAL(2,1) NULL COMMENT '0 -5 scale',
  `analyst_notes` VARCHAR(1000) NULL,
  `user_id` INT NOT NULL COMMENT 'fk*users.userid',
  PRIMARY KEY (`vendor_id`, `smce_id`, `round`, `update_date`, `year`, `quarter`),
  INDEX `FKstagana2_idx` (`user_id` ASC),
  INDEX `FKrfiscorestaging_idx` (`smce_id` ASC),
  INDEX `FKrfelementvendor_idx` (`vendor_id` ASC),
  CONSTRAINT `FKstagana3`
    FOREIGN KEY (`user_id`)
    REFERENCES `SolutionMaps`.`users` (`userid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FKrfiscorestaging2`
    FOREIGN KEY (`smce_id`)
    REFERENCES `SolutionMaps`.`suitemodcatelem` (`smceid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FKrfelementvendor2`
    FOREIGN KEY (`vendor_id`)
    REFERENCES `SolutionMaps`.`vendors` (`vendorid`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `SolutionMaps` ;

-- -----------------------------------------------------
-- procedure P_test
-- -----------------------------------------------------

DELIMITER $$
USE `SolutionMaps`$$
CREATE PROCEDURE P_test (IN vendor_id int)
BEGIN
    SELECT * FROM Vendors WHERE
    Vendors.VendorID = vendor_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure P_VendorsTest
-- -----------------------------------------------------

DELIMITER $$
USE `SolutionMaps`$$
CREATE PROCEDURE P_VendorsTest  (IN MyVendorID INT)
BEGIN
	SELECT * FROM Vendors
    WHERE VendorID = MyVendorId;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
